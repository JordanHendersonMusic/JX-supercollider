title:: JX Tutorial
summary:: A tutorial for JX
categories:: Libraries>JX
keyword::JX

section:: What is JX

JX aims to do four things:

list::
## Remove manual resource management by having synths own resources like busses and buffers.
## Allow connecting of resources between different synths, vastly simplify signal routing as well as sharing of resources.
## Make working with multiple files easy, safe, and reusable.
## Directly manipulate OSC mappings
::

Unlike other Quarks, JX is not designed for live coding, or any live alteration of the underlying structure.
Instead, this Quark is designed to aid in making reactive systems,
where a performer's actions generate osc data in real-time.
However, it is possible to use normal supercollider techinques in a JX2SC context.
Alternatives that do similar things but for different purposes are
link::https://github.com/vitreo12/AlgaLib##AlgaLib:: and
link::https://github.com/jamshark70/ddwMixerChannel##ddwMixerChannel::.

Current, JX comes with 3 types of resource:
list::
## busses: link::Classes/JXIn:: and link::Classes/JXOut::
## buffers: link::Classes/JXOwnedBuffer:: and link::Classes/JXBorrowedBuffer::
## and OSC ports: link::Classes/JXOscSrc:: and link::Classes/JXOscSink::
::
However the class syntax for adding more is designed to be simple and easy to extend.


JX treats the OSC mappings strong::themselves:: as object that can be sequenced and manipulated.
OSC maps can be considered relationships between the different elements of the system,
which are then sequenced, blended between, or otherwise manipulated.
These maps can be dynamic, for example mapping some data to a sine wave, applying some incoming data through a low pass filter,
or using supercolliders link::Classes/Demand:: rate ugen to generate sequence to data.
This allows, as a further example, audiovisual relationships to be described in OSC maps, which are then interpolated between as the piece progresses, or in response to some other data.

Each type of resource has, a link::Classes/JXResourceConstructor::, a link::Classes/JXResource::, and optionally a link::Classes/JXResourceUgen::.
However, most of the time, you will only use the resource-ugen.


section:: Demonstations

note:: Unless otherwise stated, all of the following code must take place inside of a code::s.waitForBoot:: call. Unlike many other Quarks, the point here is to make an immutable structure, so realtime alterations to the node tree are not alllowed.
::

Contents:
list::
## link::#Basic Busses and Connect::
## link::#Connect::
## link::#More Busses::
## link::#Buffers::
## link::#Groups and Import - working with multiple files::
## link::#JX2SC - using JX and supercollider's standard library::
## link::#OSC mapping::
list::
## link::#Defining osc information::
## link::#JXOscMapMk::
## link::#Mutating and Sequencing::
## link::#Composability::
::
## link::#Extra utilities::
list::
## link::#JXGlobal::
## link::#JXTypeCheck::
## link::#JXAssertOpenedFromDirectory::
::
::

subsection:: Basic Busses and Connect

There are two types of busses, input and outputs.
There respective ugens are link::Classes/JXIn:: and link::Classes/JXOut::


code::
s.waitForBoot {
	var from = JXSynthDef('/from', {
		JXOut.ar(\out, SinOsc.ar(2));
	});

	var to = JXSynthDef('/to', {
		JXIn.ar(\in, 1)
	})
	.connect( from[\out] -> \in );
}
::

Two synths are made, one called code::'/from':: assigned to the varible code::from::, and the other "to".
code::.connect:: connects from code::from::'s output, called code::\out::, to code::to::'s input, called code::\in::.

subsection:: Connect


code::.connect:: has a few extra syntaxes.

code::
// Many -> one connections
.connect(
	from[\outA] -> \in
	from[\outB] -> \in,
	from[\outC] -> \in,
);
// or like this
.connect( from[\outA, \outB, \outC] -> \in );

// one -> many...
.connect( from[\outA] -> [\inA, \inB] );

// many -> many - creates 6 connections
.connect( from[\outA, \outB, \outC] -> [\inA, \inB] );

// with a scaling function
.connect( from[\outA] -> _.exprange(200, 400) -> \freq );
::


subsection:: More Busses

link::Classes/JXIn:: and link::Classes/JXOut:: are the built in bus resource. Whilst link::Classes/JXOut:: takes a name and a signal, link::Classes/JXIn:: has two important options, reduction and reshape.

When conencting busses of with different numbers of channels, a JXReshape function will be used. There are a few builtin options, but custom ones can be provided, for example, JXReshape.circular will assume the array is a circle around the listener.

When connecting multiple outputs to a single input, a link::Classes/JXReduce:: can be used to determine how these busses should be combined. There are two builtin options JXReduce.mean and JXReduce.sum, these are the defaults for control rate and audio rate busses respectively. Connecting between control rate and audio rate is also allowed.

code::
var from = JXSynthDef('/from', {
	JXOut.ar(\outA, SinOsc.ar(2));   // 1 chan
	JXOut.ar(\outB, LFNoise2.ar(2.0.rand!2 + 80)  * 0.5); // 2 chan
	JXOut.ar(\outC, LFNoise2.ar(8.0.rand!6 + 600) * 0.1); // 6 chan
});

var to = JXSynthDef('/to', {
	JXIn.kr(\in, 4, JXReduce.mean, JXReshape.circular) // 4 channel bus
})
.connect( from[\outA, \outB, \outC] -> \in );

to.getResource(\in).bus.scope; // scope the bus
::


subsection:: Buffers

The two buffer classes are link::Classes/JXOwnedBuffer:: and link::Classes/JXBorrowedBuffer::

It is not possible to connect multiple buffers together, and error will be thrown if you try.

code::
 s.waitForBoot {
	var writer = JXSynthDef('/writer', {
		var buf = JXOwnedBuffer.fill(\buf, numChannels: 1, duration: 10, func: 0);
		RecordBuf.ar( SoundIn.ar(0), buf );
	});

	var grain = JXSynthDef('/grain', {
		var buf = JXBorrowedBuffer(\buf, 1);
		var grains = GrainBuf.ar(
            numChannels: 2,
            trigger: Dust.ar(40),
            dur: 0.3,
            sndbuf: buf,
            pos: WhiteNoise.ar(),
            pan: LFNoise2.kr(4)
        );
		JXOut.ar(\out, grains);
	})
	.connect(writer[\buf] -> \buf);

	grain.getResource(\out).bus.scope;
	~writer = writer;
}

~writer.getResource(\buf).buffer.plot
::

link::Classes/JXOwnedBuffer:: has a few other creation methods of note.

subsection:: Groups and Import - working with multiple files

Building large structures like this can get cumbersome, requiring many connections. link::Classes/JXGroup:: can be used encapsulate synths and forward only the require resource outside. However, link::Classes/JXGroup:: is best combined with link::Classes/JXImport:: and seperated into a new file.

In file code:: main.scd ::
code::
JXAssertOpenedFromDirectory("/home/user/my_project_dir");

s.waitForBoot {
	var generators = JXImport.cwd("noises.scd").(
		\groupName: '/noises'
	);
	var outputter = JXSynthDef('/out', {
		JXIn.ar(\in, 2, JXReduce.mean, JXReshape.circular).poll
	})
	.connect( generators[\out] -> \in );

	outputter.getResource(\in).bus.scope;
}
::

In file code:: noises.scd ::
code::
{   |groupName|
	JXGroup(groupName, { |self|
		var pink = JXSynthDef('/pink', {
			JXOut.ar(\out, PinkNoise.ar(0.1!4))
		});
		var white = JXSynthDef('/white', {
			JXOut.ar(\out, WhiteNoise.ar(0.3!4))
		});

		var sum = JXSynthDef('/sum', {
			var in = JXIn.ar(\in, 2);
			JXOut.ar(\out, in);
		})
		.connect(
			pink[\out]  ->  \in,
			white[\out] ->  \in
		);

		self.forwardResource( sum[\out] -> \out );
	});
}
::

link::Classes/JXImport:: imports the file as a function, allow for arguments to be passed in and the function called multiple times.
This makes reusable structure easy to create in JX.

code::
var n1 = JXImport.cwd("noises.scd").(\groupName: '/noisesA');
var n2 = JXImport.cwd("noises.scd").(\groupName: '/noisesB');
var n3 = JXImport.cwd("noises.scd").(\groupName: '/noisesC');
::

Global varibles strong:: do not work :: across files, this has purposefully been disabled as it causes many issues.
There is an alternative provided by using link::Classes/JXGlobal::.

subsection:: JX2SC - using JX and supercollider's standard library

It is impossible to use patterns with a JX synth.
However, link::Classes/JX2SC:: can be used to create a wrapper around supercollider,
so that any supercollider process looks like a JX one.
The code::owner:: argument defines all the jx resources.
The code::func:: argument is where the normal supercollider code is placed, and code::context:: is passed it.
With code::context:: you can get the code::owner::'s resources and the group.
code::

var noise = JXSynthDef('/noise', { JXOut.kr(\out, LFNoise2.kr(0.3)) });

var bleeps = JX2SC('/bleeps',
	owner: {
		JXIn.kr(\amp, 1, JXReduce.mean);
		JXIn.kr(\freq, 1, JXReduce.mean);
		JXOut.ar(\out, DC.ar(0!2));
	},
	func: { |context|
		SynthDef(\bleeper, {
			var sin = SinOsc.ar(\freq.kr) * EnvGen.ar(Env.perc, doneAction: 2);
			var out = sin * context.getResource(\amp).asUgen;
			context.getResource(\out).asUgen(out!2);
		}).add;
		s.sync;

		Pdef(\pat, Pbind(
			\instrument, \bleeper,
			\group, context.asGroup, /// this line is very important!!!
			\dur, 0.2,
			\freq, context.getResource(\freq).asPattern.linexp(-1, 1, 200, 800)
		)).play
})
.connect( noise[\out] -> [\amp, \freq] );

bleeps.getResource(\out).bus.scope
::


section:: OSC mapping


OSC mapping is used to create relationships between data sources and sinks. For an example, in an audiovisual one such map might be, as the saxophone's mic recieves a louder signal, make the screen brighter. These maps can then be manipulated.

subsection:: Defining osc information

Internal osc information is defined inside of synths

code::
JXSynthDef('/src', {
	var sig = ....;
	JXOscSrc.kr('/amp', Amplitude.kr(sig, 0.3, 0.1) )
});
JXSynthDef('/sink', {
	var amp = JXOscSink.kr('/amp', 1);
	...
});
::

The osc addresses of these sinks and sources, will be: code::/src/amp:: and code::/sink/amp::.
The server's node tree mirrors the osc namespace.
Therefore placing both these in a link::Classes/JXGroup:: called code::/group:: would give the osc addresses: code::/group/src/amp:: and code::/group/sink/amp::.

External osc information is declared like this...
code::
JXOscStore.registerExternalSinks(
	NetAddr("localhost", 23425) -> [
		(osc: '/pd/freq', chans: 1),
		(osc: '/pd/amp',  chans: 2),
	]
);
JXOscStore.registerExternalSrc(
	NetAddr("localhost", 5623) -> [
		(osc: '/pd/value', chans: 1),
		(osc: '/pd/xy', chans: 2)
	]
);
::
It is best to place these inside of a seperate file and pass in the network addresses.

subsection:: JXOscMapMk

To make an osc map, use link::Classes/JXOscMapMk::.
code::
var mapAmaker = JXOscMapMk({ |srcs|
	JXOscMap((
		'/beep/gain' : srcs['/noise/amp'] * LFNoise2.kr(2),
		'/beep/amp' : -10.dbamp
	))
});
::

Then inside of a special synthdef, link::Classes/JXOscMapperSynth::, the osc sources can be gathered, the map created, passed to link::Classes/JXOscMapOutput::, and an link::Classes/JXOscRelay:: created, sending the external osc data to its respective link::Classes/NetAddr::.

code::
JXOscMapperSynth({
	var srcs = JXOscStore.getMapSources();
	var mapa = mapAmaker.makeMap(srcs)
	JXOscMapOutput.kr(mapa);
});

JXOscRelay.init(sendingRate: 120);
::

subsection:: Mutating and Sequencing


There are two types of osc map interpolation that do subtly different things depending of whether the keys in the map are the same.

strong::JXOscMap** Interpolation::

When an osc sink is present in one map, but not the following, the interpolation classer
(e.g., link::Classes/JXOscMapLinSelectX:: or link::Classes/JXOscMapBiLinearX::) will gradually apply a lowpass filter to the data until it stops moving. This often works well when interpolating slowly, but can cause weird behaviour when suddenly jumping between different maps.

Below, lineary interpolation between any number of maps using link::Classes/JXOscMapLinSelectX::.
code::
JXOscMapperSynth({|src|
	var a = mapAmk.makeMap(src);
	var b = mapBmk.makeMap(src);
	var c = mapCmk.makeMap(src);
	var d = mapDmk.makeMap(src);

	var lerp = JXOscMapLinSelectX(MouseX.kr(0, 3), a, b, c, d);

	JXOscMapOutput.kr(lerp);
});
::

link::Classes/JXOscMapBiLinearX:: does 2d interpolation, like an 'x-y' pad.
code::
JXOscMapperSynth({|src|
	var a = mapAmk.makeMap(src);
	var b = mapBmk.makeMap(src);
	var c = mapCmk.makeMap(src);
	var d = mapDmk.makeMap(src);

	var coords = [MouseX.kr, MouseY.kr];
	var lerp = JXOscMapBiLinearX(coords, a, b, c, d);

	JXOscMapOutput.kr(lerp);
});
::

strong::JXOscMap operators::

The other way to mutate maps is by using the built in operators.
However, the operator will only be applied when both osc maps share the key, otherwise, the result will just copy the value.
Internally, this uses link::Classes/Dictionary#-merge::.

code::<+/>:: is a short hand for the average.

code::
JXOscMapperSynth({|src|
	var a = mapAmk.makeMap(src);
	var b = mapBmk.makeMap(src);
	var c = mapCmk.makeMap(src);
	var d = mapDmk.makeMap(src);

	var out = (a + b) <+/> (c + d);

	JXOscMapOutput.kr(out);
});
::


subsection:: Composability

It is not possible to get acess to an osc source inside of a link::Classes/JXOscMapperSynth::.

However, link::Classes/JXOscMap::s are composable inside a link::Classes/JXOscMapMk::.
code::

var mapCmaker = JXOscMapMk({ |srcs|
	var a = mapAmaker.makeMap(srcs);
	var b = mapBmaker.makeMap(srcs);

	JXOscMapLinSelectX(srcs['/beep/out/amp'], a, b)
	++                                               // concat maps
	JXOscMap(( '/beep/freq' : LFNoise0.kr(0.1) ))
});
::

It is possible to create very complex behaviour quite quickly using this method.

section:: Extra utilities

subsection:: JXGlobal

'Global' varibles are best avoided when using JX.
If information needs to be passed to a seperate file, it is best to use a function argument with JXImport.
However, if there is some information that doesn't change throughout a performance,
link::Classes/JXGlobal:: can be used to safetly pass immutable data around.
The benifit over global varibles is that this will throw if it doesn't exist,
you can explicitly state what varibles a file needs at the top, and you can only define them once.
This makes it clear to any user of the file that they must define these globals and if they don't,
there is an immediate readable error.

code::
// in some top file
JXGlobal(
	\testSound -> WhiteNoise.ar(),
	\numSpeakers -> 6,
	\mainOut -> { |a| Out.ar(0, a) }
);

// in some other file
JXGlobal.get(\thisWillThrow) // throws an error as it doesn't exist

// will throw an error if these do not exist and they don't match the required indicated types, where present.
JXGlobal.require(
	\numSpeakers -> Integer,
	\mainOut -> Function,
	\testSound
);
::

subsection:: JXTypeCheck
Type checks a varibles, will throw an error and stop execution.
code::
JXTypeCheck(thisMethod, a -> Integer, b -> Number);
::

subsection:: JXAssertOpenedFromDirectory
Will force the user to open the file from a given directory.
I have seen several issues where File.getcwd doesn't return what a user expects, this will force the issue.
code::
JXAssertOpenedFromDirectory("/path/to/project/directory");
::

